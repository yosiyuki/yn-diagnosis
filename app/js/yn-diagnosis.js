// Generated by CoffeeScript 1.6.3
(function() {
  $.fn.extend({
    ynDiagnosis: function(answers, options) {
      var createNode, log, selectNo, selectYes, settings, showResult;
      settings = {
        wrapperClass: 'ynDiagnosis',
        contentClass: 'ynDiagnosisContent',
        textYes: 'Yes',
        textNo: 'No',
        debug: false,
        yesBgColor: "#5CB85C",
        noBgColor: "#D9524F"
      };
      settings = $.extend(settings, options);
      log = function(msg) {
        if (settings.debug) {
          return console.log(msg);
        }
      };
      createNode = function(data) {
        var buttons, content;
        content = $('<div>').addClass(settings.contentClass);
        content.append($('<div>').addClass('ynText').text(data.text));
        if (data.yes) {
          buttons = $('<div>').addClass('ynButtons');
          buttons.append($('<a>').attr('href', '#').data('next', data.yes).addClass('ynYes').text(settings.textYes).click(function(self) {
            return selectYes(self);
          }));
          buttons.append($('<a>').attr('href', '#').data('next', data.no).addClass('ynNo').text(settings.textNo).click(function(self) {
            return selectNo(self);
          }));
          content.append(buttons);
        } else {
          content.addClass('ynResult');
        }
        return content;
      };
      selectYes = function(ev) {
        var el, node, prev;
        el = $(ev.target);
        prev = el.parents('.' + settings.contentClass);
        node = createNode(answers[el.data('next')]);
        node.css('zIndex', prev.css('zIndex') * 1 + 1);
        if (node.hasClass('ynResult')) {
          return showResult(node, prev);
        } else {
          node.css('left', "-" + (prev.css('width')));
          prev.after(node);
          return node.animate({
            left: "+=" + prev.css('width')
          }, 500);
        }
      };
      selectNo = function(ev) {
        var el, node, prev;
        el = $(ev.target);
        prev = el.parents('.' + settings.contentClass);
        node = createNode(answers[el.data('next')]);
        node.css('zIndex', prev.css('zIndex') * 1 + 1);
        if (node.hasClass('ynResult')) {
          return showResult(node, prev);
        } else {
          node.css('left', "" + (prev.css('width')));
          prev.before(node);
          return node.animate({
            left: "-=" + prev.css('width')
          }, 500);
        }
      };
      showResult = function(node, prev) {
        node.css('top', "-" + (prev.css('height')));
        log(prev.css('height'));
        prev.after(node);
        return node.animate({
          top: "+=" + (prev.css('height'))
        }, 1000);
      };
      return this.each(function(target) {
        var node, wrapper;
        log("Preparing magic show.");
        log("Option 1 value: " + settings.option1);
        log(self);
        log($(this));
        log(answers);
        wrapper = $('<div>').addClass(settings.wrapperClass);
        node = createNode(answers[0]).css('zIndex', 10);
        wrapper.append(node);
        return $(this).append(wrapper);
      });
    }
  });

}).call(this);
